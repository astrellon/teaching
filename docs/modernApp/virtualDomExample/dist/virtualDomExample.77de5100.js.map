{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,MAAT,CAAgB,OAAhB,EAAuC;AAEnC;AACA,MAAI,OAAO,OAAP,KAAoB,QAAxB,EACA;AACI;AACA,WAAO,QAAQ,CAAC,cAAT,CAAwB,OAAxB,CAAP;AACH,GAPkC,CASnC;;;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAO,CAAC,IAA/B,CAAnB,CAVmC,CAYnC;AACA;;AACA,OAAK,IAAM,IAAX,IAAmB,OAAO,CAAC,KAA3B,EACA;AACI;AACA;AACA,QAAI,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAJ,EACA;AACI;AACA;AACA;AACA;AACA;AACA,MAAA,UAAU,CAAC,gBAAX,CAA4B,IAAI,CAAC,MAAL,CAAY,CAAZ,CAA5B,EAA4C,OAAO,CAAC,KAAR,CAAc,IAAd,CAA5C;AACH,KARD,MAUA;AACI;AACA,MAAA,UAAU,CAAC,YAAX,CAAwB,IAAxB,EAA8B,OAAO,CAAC,KAAR,CAAc,IAAd,CAA9B;AACH;AACJ,GAhCkC,CAkCnC;;;AACA,OAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,OAAO,CAAC,QAA5B,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EACA;AADK,QAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX;AAED,IAAA,UAAU,CAAC,MAAX,CAAkB,MAAM,CAAC,KAAD,CAAxB;AACH;;AAED,SAAO,UAAP;AACH;;AAED,SAAS,IAAT,CAAc,IAAd,EAA4B,KAA5B,EAAwC;AAAE,MAAA,QAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,SAAA,CAAA,QAAA,EAAA,IAA6B;AAA7B,IAAA,QAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEtC,SAAO;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,KAAK,EAAA,KAAb;AAAe,IAAA,QAAQ,EAAA;AAAvB,GAAP;AACH;;AAED,IAAI,gBAAgB,GAAG,CAAvB;;AACA,SAAS,aAAT,GAAsB;AAElB,EAAA,gBAAgB;AAChB,EAAA,SAAS;AACZ;;AAED,SAAS,SAAT,GAAkB;AAEd;AACA,MAAM,GAAG,GAAG,IAAI,CAAC,MAAD,EAAS,EAAT,EACZ,IAAI,CAAC,IAAD,EAAO,EAAP,EAAW,QAAX,CADQ,EAEZ,IAAI,CAAC,GAAD,EAAM,EAAN,EACA,IAAI,CAAC,QAAD,EAAW,EAAX,EAAe,UAAf,CADJ,EAEA,IAAI,CAAC,QAAD,EAAW;AAAE,IAAA,OAAO,EAAE;AAAX,GAAX,EAAuC,aAAvC,CAFJ,EAGA,IAAI,CAAC,MAAD,EAAS,EAAT,EAAa,oBAAkB,gBAAlB,GAAkC,QAA/C,CAHJ,CAFQ,CAAhB;AASA,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAvB;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,GAAD,CAArB;;AAEA,MAAI,cAAc,CAAC,UAAf,CAA0B,MAA1B,GAAmC,CAAvC,EACA;AACI,IAAA,cAAc,CAAC,YAAf,CAA4B,MAA5B,EAAoC,cAAc,CAAC,UAAf,CAA0B,CAA1B,CAApC;AACH,GAHD,MAKA;AACI,IAAA,cAAc,CAAC,MAAf,CAAsB,MAAtB;AACH;AACJ,EAED;;;AACA,SAAS","file":"virtualDomExample.77de5100.js","sourceRoot":"..","sourcesContent":["// How we want our object elements to look like\ninterface ObjectElement\n{\n    // The name of the node type ('div', 'span', etc)\n    type: string;\n\n    props: Props;\n\n    // Children can be text or another object element.\n    // We need the text special type otherwise we wouldn't have a way to specify text.\n    children: VirtualElement[];\n}\n\n// Our properties/attributes are just a map of string keys to any value at the moment.\ninterface Props\n{\n    [key: string]: any;\n}\n\n// An element is either the object above or plain text.\ntype VirtualElement = ObjectElement | string;\n\nfunction render(element: VirtualElement): HTMLElement | Text\n{\n    // Check for string element\n    if (typeof(element) === 'string')\n    {\n        // The DOM already has a function for creating text nodes.\n        return document.createTextNode(element);\n    }\n\n    // The createElement function accepts the node type as a string.\n    const domElement = document.createElement(element.type);\n\n    // Add all attributes to the element.\n    // No handling of event handlers for now.\n    for (const prop in element.props)\n    {\n        // Check if the string starts with the letters 'on'.\n        // Note this function is not available in Internet Explorer.\n        if (prop.startsWith('on'))\n        {\n            // Chop off the first two characters and use the rest as the event listener type.\n            // Note: This is *not* the correct way to do this.\n            // It'll pick on anything that starts with 'on', like 'onion' or 'once'.\n            // Also we're not checking if the value is actually a function.\n            // For now to get a working example UI we'll go with it.\n            domElement.addEventListener(prop.substr(2), element.props[prop]);\n        }\n        else\n        {\n            // setAttribute is used for any attribute on an element such as class, value, src, etc.\n            domElement.setAttribute(prop, element.props[prop]);\n        }\n    }\n\n    // Append all child elements.\n    for (const child of element.children)\n    {\n        domElement.append(render(child));\n    }\n\n    return domElement;\n}\n\nfunction vdom(type: string, props: Props, ...children: VirtualElement[]): ObjectElement\n{\n    return { type, props, children };\n}\n\nlet buttonClickTimes = 0;\nfunction onClickButton()\n{\n    buttonClickTimes++;\n    renderApp();\n}\n\nfunction renderApp()\n{\n    // Example app\n    const app = vdom('main', {},\n        vdom('h1', {}, 'Header'),\n        vdom('p', {},\n            vdom('strong', {}, 'A button'),\n            vdom('button', { onclick: onClickButton }, 'Button Text'),\n            vdom('span', {}, `Button clicked ${buttonClickTimes} times`)\n        )\n    );\n\n    const rootDomElement = document.getElementById('root');\n    const domApp = render(app);\n\n    if (rootDomElement.childNodes.length > 0)\n    {\n        rootDomElement.replaceChild(domApp, rootDomElement.childNodes[0]);\n    }\n    else\n    {\n        rootDomElement.append(domApp);\n    }\n}\n\n// Render the app\nrenderApp();"]}